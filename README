NOMOGRAM
For each nomogram, data is stored in 3 matrices, the matrix for the grid we
want to check and the 2 matrices for line and column restrictions.
I go through each line and each column of the matrix of restrictions.
I use another force to go through each cell in the grid.
If the value is 1, then 'current' is incremented to count the length of the
current group of 1. If the value is 0 or we are at the last cell on the line
(j == m - 1) and current is greater than 0, then a group of 1 has ended, and
the groups variable is updated and checked to see if the size of this group
matches the corresponding constraint (current == r). If so, the variable ok
becomes 1. After traversing the entire line and checking each group of 1, the
function checks whether all restrictions have been met. If not, the function
returns -1, indicating that the restrictions for that line were not met.
The procedure is similar for columns. If the line and column restrictions are
respected,then the message 'Correct' is displayed,otherwise 'Error'.

INFINITE_PRODUCT
I started with a subprogram for converting numbers from base 8 to base 10.
So as long as the number is different from 0, I take the last digit and store
it in a y to which I add each time its last digit raised to the power of 8
corresponding, the power is also increased every time.I took a 'for' in which
I read a and b , I calculated the scalar product , I converted the numbers to
base 10.To calculate the norm, I raised a and b to the second power , and at
the end I calculated the radical from the amount I had calculated for the norm.
To calculate the second maximum, I took an 'if' that checks if a is greater
than max1, which I initialized with -1, if I find a bigger number then a
becomes max1 and in max2 I store the first maximum. If a is greater than the
second maximum but also different from the first maximum 2 is a.I did the same
thing to calculate max2 of b. Then I displayed everything I calculated.

GIGEL_AND_THE_CHECKBOARD
This program implements a simulation of the movement of a part on a
two-dimensional board.The piece starts from the upper-left corner of the board
and moves according to the values ​​found on each square of the board.
The size of the board (n) is read, where n represents the number of lines and
columns of the board. Each element of the board is read ( a[i][j]),
representing the values ​​on each square of the board. The variables i and j
represent the current coordinates of the piece on the board, and d is the total
distance traveled by the piece. Depending on the parity of the sum of the
coordinates i and j, the piece moves along lines or columns. The value in the
current square (a[i][j]) is added to the total distance (d), and the square is
marked with 0 to indicate that it has been visited. It then checks that the
coordinates stay within the boundaries of the board and return to the beginning
of the board when the piece goes out of bounds. It displays the total distance
traveled by the piece, the final coordinate on the y-axis (n - i), and the
final coordinate on the x-axis (with conversion to upper case for values
greater than 25).

CODEINVIM
I read the grades and credits in two different vectors. I calculate the initial
score that the student obtained and that he wants to increase in the
"score_calculation" function according to the formula given in the statement.
Then for each matter I calculate how much each could grow in the
"growth_of_matter" function, and put this growth in a vector that I then sort
in descending order using the 'qsort' function. Then iterate until the total
score becomes greater or equal to the desired score ('pmin'). If all subjects
have been updated and the score is still below the minimum, '-1' is displayed
and the program closes. I then display the minimum number of additional
subjects needed to reach the minimum required score.